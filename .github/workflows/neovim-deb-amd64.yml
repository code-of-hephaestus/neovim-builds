name: Build Neovim .deb Package (AMD64)

on:
  workflow_dispatch:

env:
  ACTIONS_RUNNER_DEBUG: true
  ACTIONS_STEP_DEBUG: true

jobs:
  build:
    runs-on: blacksmith-4vcpu-ubuntu-2404
    timeout-minutes: 60
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Build Prerequisites
        id: install-build-prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build gettext cmake unzip curl jq
          sudo apt-get install -y build-essential binutils lintian debhelper dh-make devscripts

      - name: Checkout Neovim Repository and build
        id: build-nvim-deb-pkg
        run: |
          git clone https://github.com/neovim/neovim
          cd neovim
          git checkout stable
          make CMAKE_BUILD_TYPE=Release
          cd build
          cpack -G DEB -D CPACK_PACKAGE_FILE_NAME="nvim-stable-linux-amd64"
          deb_file=$(realpath nvim-stable-linux-amd64.deb)
          echo "deb_file=$deb_file" >> $GITHUB_OUTPUT

      - name: Parse release info
        id: parse-release-info
        run: |
          echo "Fetching release information from GitHub API..."
          if ! release_data=$(curl -s https://api.github.com/repos/neovim/neovim/releases/tags/stable); then
            echo "Failed to fetch release data"
            exit 1
          fi

          if ! release_info=$(echo "$release_data" | jq -r '.body' | head -5); then
            echo "Failed to parse release body"
            exit 1
          fi

          echo "Release info:"
          echo "$release_info"

          {
            echo "release_info<<EOL"
            echo "$release_info"
            echo "EOL"
          } >> "$GITHUB_OUTPUT"

      - name: Parse version number
        id: parse-version-number
        run: |
          echo "Parsing version number..."
          # Try to get version from the release info first
          if ! version_number=$(echo '${{ steps.parse-release-info.outputs.release_info }}' | grep -oE "v[0-9]+\.[0-9]+\.[0-9]+"); then
            echo "Failed to parse version from release info, trying git tag..."
            # Fallback: get version from git tag
            cd neovim
            version_number=$(git describe --tags --abbrev=0)
          fi

          echo "Detected version: $version_number"
          echo "version_number=$version_number" >> $GITHUB_OUTPUT

      - name: Verify binary architecture
        run: |
          cd neovim/build
          echo "Built binary architecture:"
          file bin/nvim
          file bin/nvim | grep -q "x86-64" && echo "✓ amd64 binary verified" || echo "✗ Expected amd64, got different architecture"

      - name: Test package installation
        run: |
          cd neovim/build
          # Test that the package can be installed
          sudo dpkg -i nvim-stable-linux-amd64.deb || true
          sudo apt-get install -f -y  # Fix any dependency issues

          # Verify installation
          which nvim && nvim --version

      - name: Create Github release
        id: create-new-release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: nvim-${{ steps.parse-version-number.outputs.version_number }}-stable-linux-amd64
          name: nvim-${{ steps.parse-version-number.outputs.version_number }}-stable-linux-amd64
          body: |
            ## Neovim ${{ steps.parse-version-number.outputs.version_number }} (Linux AMD64)

            **Build Details:**
            - Version: ${{ steps.parse-version-number.outputs.version_number }}
            - Architecture: amd64 (x86_64)
            - Built from: `stable` branch
            - Build type: Release
            - Built on: blacksmith-4vcpu-ubuntu-2404

            **Installation:**
            ```bash
            # Download and install
            wget https://github.com/${{ github.repository }}/releases/download/nvim-${{ steps.parse-version-number.outputs.version_number }}-stable-linux-amd64/nvim-${{ steps.parse-version-number.outputs.version_number }}-stable-linux-amd64.deb
            sudo dpkg -i nvim-${{ steps.parse-version-number.outputs.version_number }}-stable-linux-amd64.deb
            sudo apt-get install -f  # Fix any dependency issues
            ```

            **Verification:**
            ```bash
            nvim --version
            ```

            ---

            ${{ steps.parse-release-info.outputs.release_info }}
          files: ${{ steps.build-nvim-deb-pkg.outputs.deb_file }}
          draft: false
          prerelease: false
