name: Build Neovim .deb Package (AMD64)

on:
  workflow_dispatch:

env:
  ACTIONS_RUNNER_DEBUG: true
  ACTIONS_STEP_DEBUG: true

jobs:
  build:
    runs-on: blacksmith-32vcpu-ubuntu-2404
    timeout-minutes: 60
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Build Prerequisites
        id: install-build-prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build gettext cmake unzip curl
          sudo apt-get install build-essential binutils lintian debhelper dh-make devscripts

      - name: Checkout Neovim Repository and build
        id: build-nvim-deb-pkg
        run: |
          git clone https://github.com/neovim/neovim
          cd neovim
          git checkout stable
          make CMAKE_BUILD_TYPE=Release
          cd build && cpack -G DEB -D CPACK_PACKAGE_FILE_NAME="nvim-stable-linux-amd64"
          deb_file=$(realpath nvim-stable-linux-amd64.deb)
          echo "deb_file=$deb_file" >> $GITHUB_OUTPUT

      - name: Parse release info
        id: parse-release-info
        run: |
          release_info=$(curl -s https://api.github.com/repos/neovim/neovim/releases/tags/stable | jq -r '.body' | head -5)
          echo "$release_info"
          {
            echo "release_info<<EOL"
            echo "$release_info"
            echo "EOL"
          } >> "$GITHUB_OUTPUT"

      - name: Parse version number
        id: parse-version-number
        run: |
          version_number=$(curl -s https://api.github.com/repos/neovim/neovim/releases/tags/stable | jq -r '.body' | head -5 | grep -oE "v[0-9]+.[0-9].+[0-9]+")
          echo "version_number=$version_number" >> $GITHUB_OUTPUT

      - name: Verify binary architecture
        run: |
          cd neovim/build
          echo "Built binary architecture:"
          file bin/nvim
          file bin/nvim | grep -q "x86-64" && echo "✓ amd64 binary verified" || echo "✗ Expected amd64, got different architecture"

      - name: Test package installation
        run: |
          cd neovim/build
          # Test that the package can be installed
          sudo apt install -y ./nvim-stable-linux-amd64.deb

          # Verify installation
          which nvim && nvim --version

      - name: Prepare release asset
        id: prepare-asset
        run: |
          cd neovim/build
          # Rename file to include version in filename
          versioned_filename="nvim-${{ steps.parse-version-number.outputs.version_number }}-stable-linux-amd64.deb"
          cp nvim-stable-linux-amd64.deb "$versioned_filename"
          versioned_file=$(realpath "$versioned_filename")
          echo "versioned_file=$versioned_file" >> $GITHUB_OUTPUT
          echo "versioned_filename=$versioned_filename" >> $GITHUB_OUTPUT

      - name: Create Github release
        id: create-new-release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: nvim-${{ steps.parse-version-number.outputs.version_number }}-stable-linux-amd64
          name: nvim-${{ steps.parse-version-number.outputs.version_number }}-stable-linux-amd64
          body: |
            ## Neovim ${{ steps.parse-version-number.outputs.version_number }} (Linux AMD64)

            **Build Details:**
            - Version: ${{ steps.parse-version-number.outputs.version_number }}
            - Architecture: amd64 (x86_64)
            - Built from: `stable` branch
            - Build type: Release
            - Built natively on AMD64 runner

            **Installation:**
            ```bash
            # Download and install
            wget https://github.com/${{ github.repository }}/releases/download/nvim-${{ steps.parse-version-number.outputs.version_number }}-stable-linux-amd64/${{ steps.prepare-asset.outputs.versioned_filename }}
            sudo apt install ./${{ steps.prepare-asset.outputs.versioned_filename }}
            ```

            **Verification:**
            ```bash
            nvim --version
            ```

            ---

            ${{ steps.parse-release-info.outputs.release_info }}
          files: ${{ steps.prepare-asset.outputs.versioned_file }}
