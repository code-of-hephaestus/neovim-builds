name: Build Neovim .rpm Package

on:
  # Trigger the workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    # Although the job is defined on an Ubuntu runner, we run it inside a Fedora container
    runs-on: ubuntu-24.04
    container:
      image: fedora:latest
    permissions:
      contents: write
    steps:
      # Check out this repository (to get the spec file, etc.)
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install the build tools and other dependencies inside the Fedora container
      - name: Install build prerequisites
        run: |
          dnf install -y rpm-build rpmdevtools cmake ninja-build libtool pkgconfig curl make gcc git jq

      # Set up the standard RPM build tree (~/.rpmbuild)
      - name: Set up RPM build environment
        run: rpmdev-setuptree

      # Download the stable tarball from the Neovim GitHub repository and move it to the SOURCES folder
      - name: Get Neovim stable source tarball
        run: |
          wget https://github.com/neovim/neovim/archive/refs/tags/stable.tar.gz -O neovim-stable.tar.gz
          mv neovim-stable.tar.gz ~/rpmbuild/SOURCES/neovim-stable.tar.gz

      # Copy your spec file (assumed to be at packaging/rpm/neovim.spec) into the SPECS directory
      - name: Copy spec file
        run: cp packaging/rpm/neovim.spec ~/rpmbuild/SPECS/neovim.spec

      # Build the RPM package using rpmbuild. The spec file should know how to unpack the tarball,
      # configure, build, and install Neovim into the RPM build root.
      - name: Build RPM package
        id: build-rpm
        run: |
          rpmbuild -ba ~/rpmbuild/SPECS/neovim.spec
          # Locate the built RPM package. Adjust the find pattern if necessary.
          rpm_file=$(find ~/rpmbuild/RPMS/ -name "*.rpm" | head -n 1)
          echo "rpm_file=${rpm_file}" >> "$GITHUB_OUTPUT"

      # Retrieve release information from Neovim’s stable release via GitHub’s API (adjust as needed)
      - name: Parse release info
        id: parse-release-info
        run: |
          release_info=$(curl -s https://api.github.com/repos/neovim/neovim/releases/tags/stable | jq -r '.body' | head -5)
          echo "release_info=${release_info}" >> "$GITHUB_OUTPUT"

      # Extract a version number (for example, something like "v0.9.0") from the release info.
      - name: Parse version number
        id: parse-version-number
        run: |
          version_number=$(curl -s https://api.github.com/repos/neovim/neovim/releases/tags/stable | jq -r '.body' | head -5 | grep -oE "v[0-9]+\.[0-9]+\.[0-9]+")
          echo "version_number=${version_number}" >> "$GITHUB_OUTPUT"

      # Create a GitHub release. The tag and release name include the version number.
      - name: Create GitHub release
        id: create-new-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: nvim-${{ steps.parse-version-number.outputs.version_number }}-stable-linux-amd64
          release_name: nvim-${{ steps.parse-version-number.outputs.version_number }}-stable-linux-amd64
          body: ${{ steps.parse-release-info.outputs.release_info }}

      # Upload the generated RPM package as a release asset
      - name: Upload release asset
        id: upload-release-assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-new-release.outputs.upload_url }}
          asset_path: ${{ steps.build-rpm.outputs.rpm_file }}
          asset_name: nvim-${{ steps.parse-version-number.outputs.version_number }}-stable-linux-amd64.rpm
          asset_content_type: application/x-rpm
