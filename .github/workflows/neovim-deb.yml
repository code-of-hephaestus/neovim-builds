name: Build Neovim .deb Package

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-24.04
    timeout-minutes: 60
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Build Prerequisites
        id: install-build-prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y \
          ninja-build \
          gettext \
          cmake \
          unzip \
          curl \
          build-essential \
          binutils \
          lintian \
          debhelper \
          dh-make \
          devscripts \
          lua5.1 \
          liblua5.1-0-dev \
          luajit \
          libluajit-5.1-dev \
          libuv1-dev

      - name: Build and Install Luv
        id: build-luv
        run: |
          git clone https://github.com/luvit/luv.git
          cd luv
          git checkout 1.44.2-1  # Using a stable version
          mkdir -p build
          cd build
          cmake -DWITH_SHARED_LIBUV=ON \
                -DLUA_BUILD_TYPE=System \
                -DBUILD_MODULE=OFF \
                -DBUILD_SHARED_LIBS=ON \
                ..
          make
          sudo make install
          sudo ldconfig

      - name: Checkout Neovim Repository and build
        id: build-nvim-deb-pkg
        run: |
          git clone https://github.com/neovim/neovim && cd neovim
          git checkout stable
          version=$(git describe --tag --abbrev=0 | sed 's/^v//')
          mkdir -p build && cd build
          cmake -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCPACK_PACKAGE_FILE_NAME="nvim-${version}-linux-x86_64" \
            ..
          ninja
          cpack -G DEB
          deb_file=$(realpath "nvim-${version}-linux-x86_64.deb")
          if [ ! -f "$deb_file" ]; then
            echo "DEB package not found at expected location"
            exit 1
          fi
          echo "deb_file=$deb_file" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Parse release info
        id: parse-release-info
        run: |
          release_info=$(curl -sL -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/neovim/neovim/releases/tags/stable)
          if [ $? -ne 0 ] || [ -z "$release_info" ]; then
            echo "Failed to fetch release info"
            exit 1
          fi
          body=$(echo "$release_info" | jq -r '.body')
          echo "release_info=$body" >> $GITHUB_OUTPUT

      - name: Create Github release
        id: create-new-release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: nvim-${{ steps.build-nvim-deb-pkg.outputs.version }}-stable-linux-amd64
          name: nvim-${{ steps.build-nvim-deb-pkg.outputs.version }}-stable-linux-amd64
          body: ${{ steps.parse-release-info.outputs.release_info }}
          files: ${{ steps.build-nvim-deb-pkg.outputs.deb_file }}
