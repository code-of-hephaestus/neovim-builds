name: Rocky8 Build Neovim .rpm Package

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: rockylinux:8
    permissions:
      contents: write
    steps:
      - name: Install Prerequisites
        run: |
          dnf install -y epel-release
          dnf config-manager --set-enabled powertools
          dnf install -y rpm-build wget curl jq make cmake gcc gcc-c++ unzip gettext libtool autoconf automake pkg-config ninja-build \
              luajit luajit-devel lua lua-devel libuv-devel unibilium-devel libtermkey-devel libvterm-devel \
              msgpack-devel git

      - name: Clone and prepare Lua compat-5.3
        run: |
          git clone https://github.com/keplerproject/lua-compat-5.3.git
          cd lua-compat-5.3
          mkdir -p build/include
          cp *.h *.c build/include/

      - name: Build and install luv
        run: |
          git clone https://github.com/luvit/luv.git
          cd luv
          mkdir build
          cd build
          cmake .. -DWITH_SHARED_LIBUV=ON -DLUA_BUILD_TYPE=System -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_FLAGS="-I/lua-compat-5.3/build/include"
          make
          make install
          echo "/usr/local/lib64" > /etc/ld.so.conf.d/local.conf
          ldconfig

      - name: Set up RPM build environment
        run: |
          mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
          echo '%_topdir %(echo $HOME)/rpmbuild' > ~/.rpmmacros

      - name: Download and prepare Neovim source
        run: |
          wget https://github.com/neovim/neovim/archive/refs/tags/stable.tar.gz -O ~/rpmbuild/SOURCES/neovim-stable.tar.gz

      - name: Parse version number
        id: parse-version-number
        run: |
          version=$(curl -s https://api.github.com/repos/neovim/neovim/releases/tags/stable | jq -r '.body' | head -5 | grep -oE "v[0-9]+\.[0-9]+\.[0-9]+" | sed 's/^v//')
          echo "VERSION=$version" >> $GITHUB_OUTPUT
          echo "Parsed version: $version"

      - name: Create RPM spec file
        run: |
          cat << EOF > ~/rpmbuild/SPECS/neovim.spec
          Name:           neovim
          Version:        ${{ steps.parse-version-number.outputs.VERSION }}
          Release:        1%{?dist}
          Summary:        Vim-fork focused on extensibility and usability

          License:        Apache-2.0
          URL:            https://neovim.io/
          Source0:        %{name}-stable.tar.gz

          BuildRequires:  make cmake gcc gcc-c++ unzip gettext libtool autoconf automake pkg-config ninja-build
          BuildRequires:  luajit-devel lua-devel libuv-devel unibilium-devel libtermkey-devel libvterm-devel
          BuildRequires:  msgpack-devel

          Requires:       luajit libuv unibilium libtermkey libvterm msgpack

          %description
          Neovim is a project that seeks to aggressively refactor Vim in order to:
          - Simplify maintenance and encourage contributions
          - Split the work between multiple developers
          - Enable advanced UIs without modifications to the core
          - Maximize extensibility

          %prep
          %setup -q -n %{name}-stable

          %build
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo \
                -DCMAKE_INSTALL_PREFIX=/usr \
                -DCMAKE_PREFIX_PATH=/usr/local \
                ..
          make %{?_smp_mflags}

          %install
          cd build
          %make_install

          %files
          %{_bindir}/nvim
          %{_datadir}/nvim/
          %{_mandir}/man1/nvim.1.*
          %{_datadir}/applications/nvim.desktop
          %{_datadir}/icons/hicolor/*/apps/nvim.png
          %{_datadir}/locale/*/LC_MESSAGES/nvim.mo

          %changelog
          * $(date "+%a %b %d %Y") GitHub Action - ${{ steps.parse-version-number.outputs.VERSION }}
          - Automated RPM build
          EOF

      - name: Display spec file
        run: cat ~/rpmbuild/SPECS/neovim.spec

      - name: Build RPM package
        id: build-rpm-package
        run: |
          rpmbuild -ba ~/rpmbuild/SPECS/neovim.spec
          echo "RPM_FILE=$(find ~/rpmbuild/RPMS/x86_64/ -name 'neovim-*.rpm' ! -name '*debug*')" >> $GITHUB_OUTPUT

      - name: Debug RPM build output
        run: |
          echo "Contents of ~/rpmbuild/RPMS:"
          ls -R ~/rpmbuild/RPMS
          echo "Contents of ~/rpmbuild/SRPMS:"
          ls -R ~/rpmbuild/SRPMS
          echo "RPM file contents:"
          rpm -qlp ${{ steps.build-rpm-package.outputs.RPM_FILE }}

      - name: Create Github release
        id: create-new-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: nvim-${{ steps.parse-version-number.outputs.VERSION }}-stable-linux-amd64-rpm
          release_name: Neovim ${{ steps.parse-version-number.outputs.VERSION }} Stable (Linux AMD64 RPM)

      - name: Upload assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-new-release.outputs.upload_url }}
          asset_path: ${{ steps.build-rpm-package.outputs.RPM_FILE }}
          asset_name: neovim-${{ steps.parse-version-number.outputs.VERSION }}-amd64.rpm
          asset_content_type: application/x-rpm

      - name: Verify uploaded asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Waiting for asset to be processed..."
          sleep 15

          echo "Fetching release information..."
          release_info=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/nvim-${{ steps.parse-version-number.outputs.VERSION }}-stable-linux-amd64-rpm")
          
          echo "Extracting asset URL..."
          asset_url=$(echo "$release_info" | jq -r '.assets[0].browser_download_url')
          
          if [ -z "$asset_url" ]; then
            echo "Failed to retrieve asset URL. Release info:"
            echo "$release_info" | jq .
            exit 1
          fi
          
          echo "Asset URL: $asset_url"
          
          echo "Downloading asset..."
          curl -L -o neovim.rpm "$asset_url"
          
          if [ ! -f neovim.rpm ]; then
            echo "Failed to download the RPM file"
            exit 1
          fi
          
          echo "File details:"
          file neovim.rpm
          
          echo "RPM query info:"
          rpm -qip neovim.rpm || echo "Failed to query downloaded RPM file"
          
          echo "RPM contents:"
          rpm -qlp neovim.rpm || echo "Failed to list contents of downloaded RPM file"
